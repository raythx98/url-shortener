name: Deploy to Amazon EC2

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: deploy-to-ec2
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24.0'

      - name: Build project
        run: go build ./...

      - name: Run tests
        run: go test ./...

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install dependencies on AWS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            sudo dnf update
            sudo dnf upgrade -y
          
            if ! command -v go &> /dev/null
            then
              sudo dnf install -y golang
              echo 'export PATH=$PATH:$HOME/go/bin' >> ~/.bashrc
              source ~/.bashrc
            fi
          
            if ! command -v docker &> /dev/null
            then
              sudo dnf install docker -y
            fi
          
            if ! command -v migrate &> /dev/null
            then
              go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
            fi
          
            if ! command -v nginx &> /dev/null
            then
              sudo dnf install -y nginx
            fi
          EOF

      - name: Start necessary services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            if ! systemctl is-active --quiet docker
            then
              sudo systemctl start docker
            fi
          
            if ! systemctl is-active --quiet nginx
            then
              sudo systemctl start nginx
            fi
          
            if ! groups $USER | grep -w docker
              then
              sudo usermod -aG docker $USER
            fi
          
            if ! systemctl is-active --quiet docker; then
              echo "Cannot start Docker."
              exit 1
            else 
              echo "Docker is running."
            fi
          
            if ! systemctl is-active --quiet nginx; then
              echo "Cannot start Nginx."
              exit 1
            else 
              echo "Nginx is running."
            fi
          
            if ! groups $USER | grep -w docker; then
              echo "Cannot add user to Docker group."
              exit 1
            else 
              echo "Docker has sufficient permissions."
            fi
          EOF

      - name: Clone the repository
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            rm -rf /tmp/url-shortener
            git clone https://github.com/${{ github.repository }}.git /tmp/url-shortener
          EOF

      - name: Deploy on AWS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
          
            cd /tmp/url-shortener
          
            echo 'APP_URLSHORTENER_DEBUG=false' > .env
            echo 'APP_URLSHORTENER_SERVERPORT=5051' >> .env
            echo 'APP_URLSHORTENER_DBUSERNAME=postgres' >> .env
            echo 'APP_URLSHORTENER_DBPASSWORD=${{ secrets.DB_PASSWORD }}' >> .env
            echo 'APP_URLSHORTENER_DBHOST=url-shortener-db' >> .env
            echo 'APP_URLSHORTENER_DBPORT=5432' >> .env
            echo 'APP_URLSHORTENER_DBDEFAULTNAME=postgres' >> .env
          
            export $(grep -v '^#' .env | xargs)
            make run
          
            sleep 5
          
            if [ "$(docker ps -q -f name=url-shortener-app)" ]; then
              echo "App container is running."
            else
              echo "App container is not running."
              rm -rf /tmp/url-shortener
              exit 1
            fi
          
            if [ "$(docker ps -q -f name=url-shortener-db)" ]; then
              echo "DB container is running."
            else
              echo "DB container is not running."
              rm -rf /tmp/url-shortener
              exit 1
            fi
          EOF

      - name: Setup Nginx
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            sudo cp /tmp/url-shortener/.nginx/reverse-proxy.conf /etc/nginx/conf.d/reverse-proxy.conf
            rm -rf /tmp/url-shortener
            sudo systemctl restart nginx
          
            if ! systemctl is-active --quiet nginx; then
              echo "Cannot start Nginx."
              exit 1
            else 
              echo "Nginx is running."
            fi
          EOF
