// Code generated by mockery. DO NOT EDIT.

package aws

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIS3 is an autogenerated mock type for the IS3 type
type MockIS3 struct {
	mock.Mock
}

type MockIS3_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIS3) EXPECT() *MockIS3_Expecter {
	return &MockIS3_Expecter{mock: &_m.Mock}
}

// Upload provides a mock function with given fields: ctx, bucketName, fileName, fileBytes, contentType
func (_m *MockIS3) Upload(ctx context.Context, bucketName string, fileName string, fileBytes []byte, contentType string) error {
	ret := _m.Called(ctx, bucketName, fileName, fileBytes, contentType)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string) error); ok {
		r0 = rf(ctx, bucketName, fileName, fileBytes, contentType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIS3_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockIS3_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - fileName string
//   - fileBytes []byte
//   - contentType string
func (_e *MockIS3_Expecter) Upload(ctx interface{}, bucketName interface{}, fileName interface{}, fileBytes interface{}, contentType interface{}) *MockIS3_Upload_Call {
	return &MockIS3_Upload_Call{Call: _e.mock.On("Upload", ctx, bucketName, fileName, fileBytes, contentType)}
}

func (_c *MockIS3_Upload_Call) Run(run func(ctx context.Context, bucketName string, fileName string, fileBytes []byte, contentType string)) *MockIS3_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte), args[4].(string))
	})
	return _c
}

func (_c *MockIS3_Upload_Call) Return(_a0 error) *MockIS3_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIS3_Upload_Call) RunAndReturn(run func(context.Context, string, string, []byte, string) error) *MockIS3_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIS3 creates a new instance of MockIS3. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIS3(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIS3 {
	mock := &MockIS3{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
