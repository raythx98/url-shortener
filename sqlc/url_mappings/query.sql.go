// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package url_mappings

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUrlMapping = `-- name: CreateUrlMapping :one
insert into url_mappings (shortened_url, url, inactive_expire_at, must_expire_at)
values ($1, $2, $3, $4)
returning id, shortened_url, url, created_at, inactive_expire_at, must_expire_at
`

type CreateUrlMappingParams struct {
	ShortenedUrl     string
	Url              string
	InactiveExpireAt pgtype.Timestamp
	MustExpireAt     pgtype.Timestamp
}

func (q *Queries) CreateUrlMapping(ctx context.Context, arg CreateUrlMappingParams) (UrlMapping, error) {
	row := q.db.QueryRow(ctx, createUrlMapping,
		arg.ShortenedUrl,
		arg.Url,
		arg.InactiveExpireAt,
		arg.MustExpireAt,
	)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.ShortenedUrl,
		&i.Url,
		&i.CreatedAt,
		&i.InactiveExpireAt,
		&i.MustExpireAt,
	)
	return i, err
}

const deleteExpiredUrlMappings = `-- name: DeleteExpiredUrlMappings :exec
delete from url_mappings
where timezone('UTC', now()) >= url_mappings.inactive_expire_at
   or timezone('UTC', now()) >= must_expire_at
`

func (q *Queries) DeleteExpiredUrlMappings(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredUrlMappings)
	return err
}

const deleteUrlMappingWithId = `-- name: DeleteUrlMappingWithId :exec
delete from url_mappings
where id = $1
`

func (q *Queries) DeleteUrlMappingWithId(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUrlMappingWithId, id)
	return err
}

const getUrlMapping = `-- name: GetUrlMapping :one
select id, shortened_url, url, created_at, inactive_expire_at, must_expire_at
from url_mappings
where shortened_url = $1
limit 1
`

func (q *Queries) GetUrlMapping(ctx context.Context, shortenedUrl string) (UrlMapping, error) {
	row := q.db.QueryRow(ctx, getUrlMapping, shortenedUrl)
	var i UrlMapping
	err := row.Scan(
		&i.ID,
		&i.ShortenedUrl,
		&i.Url,
		&i.CreatedAt,
		&i.InactiveExpireAt,
		&i.MustExpireAt,
	)
	return i, err
}
