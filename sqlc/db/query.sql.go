// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRedirect = `-- name: CreateRedirect :exec
insert into redirects (url_id, device, country, city)
values ($1, $2, $3, $4)
`

type CreateRedirectParams struct {
	UrlID   pgtype.Int8
	Device  string
	Country string
	City    string
}

func (q *Queries) CreateRedirect(ctx context.Context, arg CreateRedirectParams) error {
	_, err := q.db.Exec(ctx, createRedirect,
		arg.UrlID,
		arg.Device,
		arg.Country,
		arg.City,
	)
	return err
}

const createUrl = `-- name: CreateUrl :one
insert into urls (user_id, title, short_url, full_url, qr)
values ($1, $2, $3, $4, $5)
returning id, user_id, title, short_url, full_url, qr, created_at, is_deleted
`

type CreateUrlParams struct {
	UserID   pgtype.Int8
	Title    string
	ShortUrl string
	FullUrl  string
	Qr       string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (Url, error) {
	row := q.db.QueryRow(ctx, createUrl,
		arg.UserID,
		arg.Title,
		arg.ShortUrl,
		arg.FullUrl,
		arg.Qr,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ShortUrl,
		&i.FullUrl,
		&i.Qr,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
insert into users (email, password)
values ($1, $2)
returning id, email, password, created_at, is_active
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const deleteUrl = `-- name: DeleteUrl :exec
update urls
set is_deleted = true
where id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUrl, id)
	return err
}

const getRedirectsByUrlId = `-- name: GetRedirectsByUrlId :many
select id, url_id, device, country, city, created_at
from redirects
where url_id = $1
`

func (q *Queries) GetRedirectsByUrlId(ctx context.Context, urlID pgtype.Int8) ([]Redirect, error) {
	rows, err := q.db.Query(ctx, getRedirectsByUrlId, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Redirect
	for rows.Next() {
		var i Redirect
		if err := rows.Scan(
			&i.ID,
			&i.UrlID,
			&i.Device,
			&i.Country,
			&i.City,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrl = `-- name: GetUrl :one
select id, user_id, title, short_url, full_url, qr, created_at, is_deleted
from urls
where id = $1
  and is_deleted = false
`

func (q *Queries) GetUrl(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRow(ctx, getUrl, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ShortUrl,
		&i.FullUrl,
		&i.Qr,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getUrlByShortUrl = `-- name: GetUrlByShortUrl :one
select id, user_id, title, short_url, full_url, qr, created_at, is_deleted
from urls
where short_url = $1
  and is_deleted = false
`

func (q *Queries) GetUrlByShortUrl(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRow(ctx, getUrlByShortUrl, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.ShortUrl,
		&i.FullUrl,
		&i.Qr,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getUrlsByUserId = `-- name: GetUrlsByUserId :many
select id, user_id, title, short_url, full_url, qr, created_at, is_deleted
from urls
where user_id = $1
  and is_deleted = false
`

func (q *Queries) GetUrlsByUserId(ctx context.Context, userID pgtype.Int8) ([]Url, error) {
	rows, err := q.db.Query(ctx, getUrlsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.ShortUrl,
			&i.FullUrl,
			&i.Qr,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select id, email, password, created_at, is_active
from users
where id = $1
  and is_active = true
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, created_at, is_active
from users
where email = $1
  and is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.IsActive,
	)
	return i, err
}

const getUserTotalClicks = `-- name: GetUserTotalClicks :one
select count(*)
from redirects r
where r.url_id in (select id
                   from urls
                   where user_id = $1
                     and is_deleted = false)
`

func (q *Queries) GetUserTotalClicks(ctx context.Context, userID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getUserTotalClicks, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
